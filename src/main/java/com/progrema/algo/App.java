package com.progrema.algo;

import com.progrema.algo.weekone.Percolation;

import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdRandom;

/*
 * This Java source file was generated by the Gradle 'init' task.
 * https://guides.gradle.org/building-java-applications/
 * 
 * Problem solution
 * https://github.com/aistrate/AlgorithmsSedgewick/tree/master/1-Fundamentals/1-1-BasicProgModel
 * 
 */
public class App {
    
    /**
     * Dummy function to says hello word
     */
    public String getGreeting() {

        return "Hello World";
    }

    /**
     * Main function. To debug: 
     *   $ gradle run -Pargs="debug"
     * 
     * @param args of cmd line
     */
    public static void main(String[] args) {

        // Default section, DONT DELETE!
        if (args.length > 0) {
            if (args[0].equals("debug")) {
                Logger.setDebugMode(true);
            } else { 
                Logger.setDebugMode(false);
            }
        } else {
            Logger.setDebugMode(false);
        }

        String[] input = StdIn.readAllStrings();
        Logger.showArray(input);

        // Test section, write as you wish!
        //test_unit_01();
        //test_unit_02();
        test_unit_03();
    }

    private static void test_unit_03() {
        int N = 5;
        Percolation percolation = new Percolation(N);        
        
        percolation.open(1, 1);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("is [1,1] full? " + percolation.isFull(1, 1));
        Logger.print("\n");

        percolation.open(2, 2);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("is [2,2] full? " + percolation.isFull(2, 2));
        Logger.print("\n");

        percolation.open(2, 1);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("is [2,1] full? " + percolation.isFull(2, 1));
        Logger.print("\n");
        Logger.print("is [2,2] full? " + percolation.isFull(2, 2));
        Logger.print("\n");
    }

    private static void test_unit_02() {
        int N = 20;
        Percolation percolation = new Percolation(N);
        for (int T=0; T<1000; T++) {
            Logger.print("T=" + T + "\n");
            percolation.open(StdRandom.uniform(N) + 1, StdRandom.uniform(N) + 1);
            // percolation.debug_showGrid();
            // percolation.debug_showConnectedGrid();
            if (percolation.percolates()) {
                Logger.print("!!!SYSTEM PERCOLATES!!!\n");
                Logger.print("Number of Open Sites: " + percolation.numberOfOpenSites() + "\n");
                break;
            }
            else {
                Logger.print("!!!SYSTEM NOT YET PERCOLATES!!!\n");
            }
            Logger.print("\n");
        }          
    }

    private static void test_unit_01() {

        int N = 5;
        Percolation percolation = new Percolation(N);
        
        percolation.open(1, 1);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("\n");

        percolation.open(1, 2);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("\n");
        
        percolation.open(1, 3);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("\n");

        percolation.open(1, 4);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("\n");

        percolation.open(1, 5);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("\n");

        percolation.open(2, 5);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("\n");
        
        percolation.open(3, 5);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("\n");

        percolation.open(5, 5);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("\n");

        percolation.open(2, 1);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("\n");
        
        percolation.open(3, 1);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("\n");

        percolation.open(5, 1);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();        
        Logger.print("\n");

        percolation.open(5, 2);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();        
        Logger.print("\n");

        percolation.open(5, 3);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();        
        Logger.print("\n");

        percolation.open(5, 4);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();        
        Logger.print("\n");        

        percolation.open(2, 3);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();        
        Logger.print("\n");            

        percolation.open(3, 3);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();        
        Logger.print("\n");          

        percolation.open(3, 2);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();        
        Logger.print("\n");  

        percolation.open(3, 4);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();        
        Logger.print("\n");

        percolation.open(4, 5);
        // percolation.debug_showGrid();
        // percolation.debug_showConnectedGrid();
        Logger.print("\n");
    }
}
